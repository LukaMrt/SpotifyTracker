// ‚è±Ô∏è USE DEBOUNCE HOOK - Hook pour d√©bouncer les valeurs
import { useState, useEffect } from 'react';

/**
 * üîßHook useDebounce - Retarde la mise √† jour d'une valeur
 *
 * Utile pour √©viter les appels API trop fr√©quents lors de la saisie
 * dans un champ de recherche par exemple.
 *
 * @param value - La valeur √† d√©bouncer
 * @param delay - Le d√©lai en millisecondes (d√©faut: 500ms)
 * @returns La valeur debounc√©e
 *
 * @example
 * ```typescript
 * const [searchTerm, setSearchTerm] = useState('')
 * const debouncedSearchTerm = useDebounce(searchTerm, 300)
 *
 * useEffect(() => {
 *   if (debouncedSearchTerm) {
 *     // Faire l'appel API seulement apr√®s 300ms d'inactivit√©
 *     searchApi(debouncedSearchTerm)
 *   }
 * }, [debouncedSearchTerm])
 * ```
 */
export function useDebounce<T>(value: T, delay = 500): T {
  // üè™ √âtat pour stocker la valeur debounc√©e
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    // ‚è∞ D√©finir un timer pour mettre √† jour la valeur apr√®s le d√©lai
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    // üßπ Nettoyer le timer si la valeur change avant la fin du d√©lai
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}

/**
 * üîß Hook useDebounceCallback - D√©bounce un callback
 *
 * Utile pour d√©bouncer des fonctions plut√¥t que des valeurs
 *
 * @param callback - La fonction √† d√©bouncer
 * @param delay - Le d√©lai en millisecondes
 * @param deps - Les d√©pendances du callback
 * @returns La fonction debounc√©e
 *
 * @example
 * ```typescript
 * const handleSearch = useDebounceCallback((term: string) => {
 *   searchApi(term)
 * }, 300, [])
 * ```
 */
export function useDebounceCallback<T extends (...args: any[]) => any>(
  callback: T,
  delay: number
): T {
  const [debounceTimer, setDebounceTimer] = useState<number | null>(null);

  const debouncedCallback = ((...args: Parameters<T>) => {
    // üßπ Nettoyer le timer pr√©c√©dent
    if (debounceTimer) {
      clearTimeout(debounceTimer);
    }

    // ‚è∞ Cr√©er un nouveau timer
    const newTimer = setTimeout(() => {
      callback(...args);
    }, delay);

    setDebounceTimer(newTimer);
  }) as T;

  // üßπ Nettoyer le timer au d√©montage du composant
  useEffect(() => {
    return () => {
      if (debounceTimer) {
        clearTimeout(debounceTimer);
      }
    };
  }, [debounceTimer]);

  return debouncedCallback;
}
