// üíæ USE LOCAL STORAGE HOOK - Hook pour g√©rer le localStorage
import { useState, useCallback } from 'react';

/**
 * üîß Hook useLocalStorage - Synchronise un √©tat avec le localStorage
 *
 * Permet de persister des donn√©es dans le localStorage avec une API
 * similaire √† useState mais avec synchronisation automatique.
 *
 * @param key - La cl√© dans le localStorage
 * @param initialValue - La valeur initiale si rien n'est trouv√©
 * @returns [value, setValue, removeValue] - Tuple avec la valeur, setter et remover
 *
 * @example
 * ```typescript
 * const [theme, setTheme, removeTheme] = useLocalStorage('theme', 'light')
 *
 * // Utilisation comme useState normal
 * setTheme('dark')
 *
 * // Supprimer du localStorage
 * removeTheme()
 * ```
 */
export function useLocalStorage<T>(
  key: string,
  initialValue: T
): [T, (value: T | ((prev: T) => T)) => void, () => void] {
  // üè™ √âtat pour stocker la valeur
  const [storedValue, setStoredValue] = useState<T>(() => {
    try {
      // üîç Essayer de r√©cup√©rer depuis le localStorage
      if (typeof window !== 'undefined') {
        const item = window.localStorage.getItem(key);
        return item ? JSON.parse(item) : initialValue;
      }
      return initialValue;
    } catch (error) {
      console.warn(
        `Erreur lors de la lecture du localStorage pour la cl√© "${key}":`,
        error
      );
      return initialValue;
    }
  });

  // üíæ Fonction pour sauvegarder une valeur
  const setValue = useCallback(
    (value: T | ((prev: T) => T)) => {
      try {
        // üìù Calculer la nouvelle valeur (si c'est une fonction)
        const valueToStore =
          value instanceof Function ? value(storedValue) : value;

        // üè™ Mettre √† jour l'√©tat
        setStoredValue(valueToStore);

        // üíæ Sauvegarder dans le localStorage
        if (typeof window !== 'undefined') {
          window.localStorage.setItem(key, JSON.stringify(valueToStore));
        }
      } catch (error) {
        console.error(
          `Erreur lors de la sauvegarde dans le localStorage pour la cl√© "${key}":`,
          error
        );
      }
    },
    [key, storedValue]
  );

  // üóëÔ∏è Fonction pour supprimer la valeur
  const removeValue = useCallback(() => {
    try {
      // üè™ Remettre la valeur initiale dans l'√©tat
      setStoredValue(initialValue);

      // üóëÔ∏è Supprimer du localStorage
      if (typeof window !== 'undefined') {
        window.localStorage.removeItem(key);
      }
    } catch (error) {
      console.error(
        `Erreur lors de la suppression du localStorage pour la cl√© "${key}":`,
        error
      );
    }
  }, [key, initialValue]);

  return [storedValue, setValue, removeValue];
}

/**
 * üîß Hook useLocalStorageState - Version simplifi√©e qui retourne juste [value, setValue]
 *
 * @param key - La cl√© dans le localStorage
 * @param initialValue - La valeur initiale
 * @returns [value, setValue] - Tuple comme useState
 */
export function useLocalStorageState<T>(
  key: string,
  initialValue: T
): [T, (value: T | ((prev: T) => T)) => void] {
  const [storedValue, setValue] = useLocalStorage(key, initialValue);
  return [storedValue, setValue];
}

/**
 * üîß Hook useSessionStorage - Version pour sessionStorage
 *
 * M√™me API que useLocalStorage mais utilise sessionStorage
 * (donn√©es supprim√©es √† la fermeture de l'onglet)
 */
export function useSessionStorage<T>(
  key: string,
  initialValue: T
): [T, (value: T | ((prev: T) => T)) => void, () => void] {
  const [storedValue, setStoredValue] = useState<T>(() => {
    try {
      if (typeof window !== 'undefined') {
        const item = window.sessionStorage.getItem(key);
        return item ? JSON.parse(item) : initialValue;
      }
      return initialValue;
    } catch (error) {
      console.warn(
        `Erreur lors de la lecture du sessionStorage pour la cl√© "${key}":`,
        error
      );
      return initialValue;
    }
  });

  const setValue = useCallback(
    (value: T | ((prev: T) => T)) => {
      try {
        const valueToStore =
          value instanceof Function ? value(storedValue) : value;
        setStoredValue(valueToStore);
        if (typeof window !== 'undefined') {
          window.sessionStorage.setItem(key, JSON.stringify(valueToStore));
        }
      } catch (error) {
        console.error(
          `Erreur lors de la sauvegarde dans le sessionStorage pour la cl√© "${key}":`,
          error
        );
      }
    },
    [key, storedValue]
  );

  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue);
      if (typeof window !== 'undefined') {
        window.sessionStorage.removeItem(key);
      }
    } catch (error) {
      console.error(
        `Erreur lors de la suppression du sessionStorage pour la cl√© "${key}":`,
        error
      );
    }
  }, [key, initialValue]);

  return [storedValue, setValue, removeValue];
}
