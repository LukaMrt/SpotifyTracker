set shell := ["bash", "-c"]

# Variables
PHP := 'php bin/console'
MESSENGER_VERBOSITY := '-v'

# === DEPENDENCIES ===

composer_install:
    composer install

composer_update:
    composer update

composer *args='':
    composer {{args}}

# === DEVELOPMENT SERVER ===

server_start:
    symfony server:start --allow-all-ip

server_stop:
    symfony server:stop

server_logs:
    symfony server:log

# === CACHE ===

cache_clear:
    {{PHP}} cache:clear

cache_warmup: cache_clear
    {{PHP}} cache:warmup

# === DATABASE ===

migration_new:
    {{PHP}} doctrine:migrations:generate

migration_list:
    {{PHP}} doctrine:migrations:status

migration_apply:
    {{PHP}} doctrine:migrations:migrate --no-interaction

fixtures options='-c 100':
    {{PHP}} app:fixtures {{options}}

# === MESSENGER ===

messenger_consume_dev:
    {{PHP}} messenger:consume --all {{MESSENGER_VERBOSITY}}

messenger_debug:
    {{PHP}} debug:messenger

messenger_stop:
    {{PHP}} messenger:stop-workers

# === SCHEDULER ===

scheduler_debug:
    {{PHP}} debug:scheduler

# === APPLICATION ===

spotify_tracker_start: messenger_consume_dev

console *args='':
    {{PHP}} {{args}}

# === TESTING ===

test:
    just test-setup
    {{PHP}} cache:clear --env=test
    {{PHP}} doctrine:migrations:migrate --no-interaction --env=test
    {{PHP}} app:fixtures --env=test
    php vendor/phpunit/phpunit/phpunit --coverage-html var/coverage/html
    @echo "Coverage report: file://$(pwd)/var/coverage/html/index.html"

test-unit:
    php vendor/phpunit/phpunit/phpunit --group=unit --coverage-html var/coverage/html

test-e2e:
    just test-setup
    {{PHP}} cache:clear --env=test
    {{PHP}} doctrine:migrations:migrate --no-interaction --env=test
    {{PHP}} app:fixtures --env=test
    php vendor/phpunit/phpunit/phpunit --group=e2e --coverage-html var/coverage/html

test-setup:
    #!/bin/bash
    if docker ps --format "table {{{{ .Names }}}}" | grep -q "mysql_test_container"; then
        echo "‚úì Test database already running"
    else
        echo "üöÄ Starting test database..."
        docker-compose -f compose.yaml --env-file .env.test up -d database_test
        echo "‚è≥ Waiting for database to be ready..."
        for i in {1..5}; do
            sleep 1
            if docker exec mysql_test_container mysqladmin ping -h localhost --silent >/dev/null 2>&1; then
                echo "‚úì Database is ready!"
                break
            fi
            echo "   Attempt $i/5..."
        done
    fi

mutation:
    just test-setup
    {{PHP}} cache:clear --env=test
    {{PHP}} doctrine:migrations:migrate --no-interaction --env=test
    {{PHP}} app:fixtures --env=test
    php vendor/infection/infection/bin/infection --threads=4 --min-msi=80 --min-covered-msi=85

# === REPORTS ===

mutation-report:
    #!/bin/bash
    if [ -f "var/infection/infection.html" ]; then
        echo "‚úì Opening mutation testing report..."
        xdg-open "var/infection/infection.html" 2>/dev/null || open "var/infection/infection.html" 2>/dev/null || echo "Open var/infection/infection.html manually"
    else
        echo "‚ùå No mutation report found. Run 'just mutation' first."
    fi

coverage-report:
    #!/bin/bash
    if [ -f "var/coverage/html/index.html" ]; then
        echo "‚úì Opening coverage report..."
        xdg-open "var/coverage/html/index.html" 2>/dev/null || open "var/coverage/html/index.html" 2>/dev/null || echo "Open var/coverage/html/index.html manually"
    else
        echo "‚ùå No coverage report found. Run tests first."
    fi

# === CODE QUALITY ===

phpstan:
    php vendor/phpstan/phpstan/phpstan analyse -c phpstan.neon --memory-limit 1G

rector:
    php vendor/rector/rector/bin/rector process

analyse:
    just rector
    just phpstan
    just test

# === DOCKER ===

docker_build_publish_scheduler:
    docker buildx build --platform linux/arm64 -t lukamrt/spotify-tracker-scheduler --push .
